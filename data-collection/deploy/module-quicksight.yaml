AWSTemplateFormatVersion: '2010-09-09'
Description: Retrieves Quicksight User, Group, Group Members data
Parameters:
  DatabaseName:
    Type: String
    Description: Name of the Athena database to be created to hold lambda information
    Default: optimization_data
  DestinationBucket:
    Type: String
    Description: Name of the S3 Bucket to be created to hold data information
    AllowedPattern: (?=^.{3,63}$)(?!^(\d+\.)+\d+$)(^(([a-z0-9]|[a-z0-9][a-z0-9\-]*[a-z0-9])\.)*([a-z0-9]|[a-z0-9][a-z0-9\-]*[a-z0-9])$)
  DestinationBucketARN:
    Type: String
    Description: ARN of the S3 Bucket that exists or needs to be created to hold rightsizing information
  MultiAccountRoleName:
    Type: String
    Description: Name of the IAM role deployed in all accounts which can retrieve AWS Data.
  CFDataName:
    Type: String
    Description: The name of what this cf is doing.
    Default: quicksight
  GlueRoleARN:
    Type: String
    Description: Arn for the Glue Crawler role
  Schedule:
    Type: String
    Description: EventBridge Schedule to trigger the data collection
    Default: "rate(1 day)"
  ResourcePrefix:
    Type: String
    Description: This prefix will be placed in front of all roles created. Note you may wish to add a dash at the end to make more readable
  LambdaAnalyticsARN:
    Type: String
    Description: Arn of lambda for Analytics
  AccountCollectorLambdaARN:
    Type: String
    Description: Arn of the Account Collector Lambda
  CodeBucket:
    Type: String
    Description: Source code bucket
  StepFunctionTemplate:
    Type: String
    Description: S3 key to the JSON template for the StepFunction
  StepFunctionExecutionRoleARN:
    Type: String
    Description: Common role for Step Function execution
  SchedulerExecutionRoleARN:
    Type: String
    Description: Common role for module Scheduler execution

Outputs:
  StepFunctionARN:
    Description: ARN for the module's Step Function
    Value: !GetAtt ModuleStepFunction.Arn

Resources:
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ResourcePrefix}${CFDataName}-LambdaRole"
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: /
      Policies:
        - PolicyName: !Sub "${CFDataName}-MultiAccount-LambdaRole"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: "sts:AssumeRole"
                Resource: !Sub "arn:aws:iam::*:role/${MultiAccountRoleName}"
        - PolicyName: "S3Access"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "s3:PutObject"
                Resource:
                  - !Sub "${DestinationBucketARN}/*"
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W28 # Resource found with an explicit name, this disallows updates that require replacement of this resource
            reason: "Need explicit name to identify role actions"

  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ResourcePrefix}${CFDataName}-Lambda'
      Description: !Sub "Lambda function to retrieve ${CFDataName}"
      Runtime: python3.12
      Architectures: [x86_64]
      Code:
        ZipFile: |
          #Authors:
          #Authors:
          # Soham Majumder
          import os
          import json
          import logging
          import datetime
          from json import JSONEncoder
          import sys

          # update boto3 for list_tags_for_resource api
          from pip._internal import main
          main(['install', '-I', '-q', 'boto3', '--target', '/tmp/', '--no-cache-dir', '--disable-pip-version-check'])
          sys.path.insert(0,'/tmp/')

          import boto3 #pylint: disable=C0413

          BUCKET = os.environ["BUCKET_NAME"]
          PREFIX = os.environ["PREFIX"]
          ROLE_NAME = os.environ['ROLE_NAME']
          TMP_FILE_USER = "/tmp/User.json"
          TMP_FILE_GROUP = "/tmp/Group.json"
          TMP_FILE_GROUPMEMBERSHIP = "/tmp/GroupMembership.json"

          logger = logging.getLogger(__name__)
          logger.setLevel(getattr(logging, os.environ.get('LOG_LEVEL', 'INFO').upper(), logging.INFO))

          class DateTimeEncoder(JSONEncoder):
              """encoder for json with time object"""
              def default(self, o):
                  if isinstance(o, (datetime.date, datetime.datetime)):
                      return o.isoformat()
                  return None

          def assume_role(account_id, service, region):
              cred = boto3.client('sts', region_name=region).assume_role(
                  RoleArn=f"arn:aws:iam::{account_id}:role/{ROLE_NAME}",
                  RoleSessionName="data_collection"
              )['Credentials']
              return boto3.client(
                  service,region_name=region,
                  aws_access_key_id=cred['AccessKeyId'],
                  aws_secret_access_key=cred['SecretAccessKey'],
                  aws_session_token=cred['SessionToken']
              )


          def lambda_handler(event, context): 
              logger.info(f"Event data {json.dumps(event)}")
              if 'account' not in event:
                  raise ValueError("Please do not trigger this Lambda manually. Find the corresponding state machine in Step Functions and Trigger from there.")
                  
              collection_time = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
              account = json.loads(event["account"])
              account_id = account["account_id"]
              account_name = account["account_name"]
              payer_id = account["payer_id"]

              logger.info(f"Collecting data for account: {account_id}")
              quicksight_client = assume_role(account_id, "quicksight", "us-east-1") # must be us-east-1
              
              namespaces = list_namespaces(account_id=account_id, quicksight=quicksight_client)
              
              users = []
              groups = []
              group_memberships = []
              
              for namespace in namespaces:
                  capacityRegion=namespace['CapacityRegion']
                  quicksightClient=quicksight_client
                  
                  print(f"namespace={namespace}, Capacity Region{capacityRegion}, SessionRegion={quicksight_client.meta.region_name}")
                  
                  if(quicksight_client.meta.region_name != capacityRegion):
                      print(f"CapacityRegion is Different than Boto3 Session Region - Switiching to {capacityRegion}")
                      quicksightClient=assume_role(account_id, "quicksight", capacityRegion)
                      print(f"CapacityRegion is {quicksightClient.meta.region_name}")
                  
                  namespace_users = list_users(account_id=account_id,namespace=namespace['Name'],quicksight=quicksightClient)
                  users.extend(namespace_users)
                  
                  namespace_groups = list_groups(account_id=account_id,namespace=namespace['Name'],quicksight=quicksightClient)
                  groups.extend(namespace_groups)
                  
                  for group in namespace_groups:
                      group_members = list_group_memberships(account_id=account_id, namespace=namespace['Name'], group_name=group['GroupName'], quicksight=quicksightClient)
                      group_memberships.extend(group_members)

              #Upload the User, Groups, GroupMembershipData to S3            
              if(users):
                  s3_upload(account_id=account_id, payer_id=payer_id, itemList=users, data_type="user", TMP_FILE=TMP_FILE_USER)
              if(groups):
                  s3_upload(account_id=account_id, payer_id=payer_id, itemList=groups, data_type="group", TMP_FILE=TMP_FILE_GROUP)
              if(group_memberships):
                  s3_upload(account_id=account_id, payer_id=payer_id, itemList=group_memberships, data_type="groupmembership", TMP_FILE=TMP_FILE_GROUPMEMBERSHIP)


          def list_namespaces(account_id, quicksight):
              namespaces = []
              paginator = quicksight.get_paginator('list_namespaces')
              try:
                  for page in paginator.paginate(AwsAccountId=account_id):
                      namespaces.extend(page['Namespaces'])
              except ClientError as e:
                  print(e.response['Error']['Message'])
              return namespaces

          def list_users(account_id, namespace, quicksight):
              users = []
              paginator = quicksight.get_paginator('list_users')
              try:
                  for page in paginator.paginate(AwsAccountId=account_id, Namespace=namespace):
                      users.extend(page['UserList'])
              except ClientError as e:
                  print(e.response['Error']['Message'])
              return users

          def list_groups(account_id, namespace, quicksight):
              groups = []
              paginator = quicksight.get_paginator('list_groups')
              try:
                  for page in paginator.paginate(AwsAccountId=account_id, Namespace=namespace):
                      if 'GroupList' in page and page['GroupList']:
                          groups.extend(page['GroupList'])
                      else:
                          print(f"No groups found in namespace: {namespace}")
              except ClientError as e:
                  print(e.response['Error']['Message'])
              return groups

          def list_group_memberships(account_id, namespace, group_name, quicksight):
              members = []
              paginator = quicksight.get_paginator('list_group_memberships')
              try:
                  for page in paginator.paginate(AwsAccountId=account_id, Namespace=namespace, GroupName=group_name):
                      if 'GroupMemberList' in page and page['GroupMemberList']:
                          members.extend(page['GroupMemberList'])
                      else:
                          print(f"No group members found for group: {group_name} in namespace: {namespace}")
              except ClientError as e:
                  print(e.response['Error']['Message'])
              return members

          #Function to Upload the TMP_FILE(s) to S3 
          def s3_upload(account_id, payer_id, itemList, data_type, TMP_FILE):
              
              count = 0
              with open(TMP_FILE, "w", encoding='utf-8') as f:
                  for item in itemList:
                      f.write(json.dumps(item, cls=DateTimeEncoder) + "\n")
                      count += 1
              logger.info(f"{data_type} collected: {count}")

              key = datetime.datetime.now().strftime(f"{PREFIX}/{PREFIX}-{data_type}-data/payer_id={payer_id}/{data_type}-{account_id}.json")
              boto3.client('s3').upload_file(TMP_FILE, BUCKET, key)
              logger.info(f"Budget data for {account_id} stored at s3://{BUCKET}/{key}")


      Handler: 'index.lambda_handler'
      MemorySize: 2688
      Timeout: 300
      Role: !GetAtt LambdaRole.Arn
      Environment:
        Variables:
          BUCKET_NAME: !Ref DestinationBucket
          PREFIX: !Ref CFDataName
          ROLE_NAME: !Ref MultiAccountRoleName

    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89 # Lambda functions should be deployed inside a VPC
            reason: "No need for VPC in this case"
          - id: W92 #  Lambda functions should define ReservedConcurrentExecutions to reserve simultaneous executions
            reason: "No need for simultaneous execution"

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${LambdaFunction}"
      RetentionInDays: 60

  QuickSightUserCrawler:
    Type: AWS::Glue::Crawler
    Properties:
      Name: !Sub '${ResourcePrefix}${CFDataName}-users-Crawler'
      Role: !Ref GlueRoleARN
      DatabaseName: !Ref DatabaseName
      Targets:
        S3Targets:
          - Path: !Sub "s3://${DestinationBucket}/${CFDataName}/${CFDataName}-user-data/"

  QuickSightGroupCrawler:
    Type: AWS::Glue::Crawler
    Properties:
      Name: !Sub '${ResourcePrefix}${CFDataName}-groups-Crawler'
      Role: !Ref GlueRoleARN
      DatabaseName: !Ref DatabaseName
      Targets:
        S3Targets:
          - Path: !Sub "s3://${DestinationBucket}/${CFDataName}/${CFDataName}-group-data/"

  QuickSightGroupMembershipCrawler:
    Type: AWS::Glue::Crawler
    Properties:
      Name: !Sub '${ResourcePrefix}${CFDataName}-groupmemberships-Crawler'
      Role: !Ref GlueRoleARN
      DatabaseName: !Ref DatabaseName
      Targets:
        S3Targets:
          - Path: !Sub "s3://${DestinationBucket}/${CFDataName}/${CFDataName}-groupmemberships-data/"

  ModuleStepFunction:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: !Sub '${ResourcePrefix}${CFDataName}-StateMachine'
      StateMachineType: STANDARD
      RoleArn: !Ref StepFunctionExecutionRoleARN
      DefinitionS3Location:
        Bucket: !Ref CodeBucket
        Key: !Ref StepFunctionTemplate
      DefinitionSubstitutions:
        AccountCollectorLambdaARN: !Ref AccountCollectorLambdaARN
        ModuleLambdaARN: !GetAtt LambdaFunction.Arn
        Crawlers: !Sub '["${ResourcePrefix}${CFDataName}-Crawler"]'
        CollectionType: 'LINKED'
        Params: ''
        Module: !Ref CFDataName
        DeployRegion: !Ref AWS::Region
        Account: !Ref AWS::AccountId
        Prefix: !Ref ResourcePrefix

  ModuleRefreshSchedule:
    Type: 'AWS::Scheduler::Schedule'
    Properties:
      Description: !Sub 'Scheduler for the ODC ${CFDataName} module'
      Name: !Sub '${ResourcePrefix}${CFDataName}-RefreshSchedule'
      ScheduleExpression: !Ref Schedule
      State: ENABLED
      FlexibleTimeWindow:
        MaximumWindowInMinutes: 30
        Mode: 'FLEXIBLE'
      Target:
        Arn: !GetAtt ModuleStepFunction.Arn
        RoleArn: !Ref SchedulerExecutionRoleARN

  AnalyticsExecutor:
    Type: Custom::LambdaAnalyticsExecutor
    Properties:
      ServiceToken: !Ref LambdaAnalyticsARN
      Name: !Ref CFDataName

  AthenaQuery:
    Type: AWS::Athena::NamedQuery
    Properties:
      Database: !Ref DatabaseName
      Description: !Sub "Provides a summary view of the ${CFDataName}"
      Name: !Sub "${CFDataName}_view"
      QueryString: !Sub |
        CREATE OR REPLACE VIEW budgets_view AS
        SELECT
          budgetname budget_name
        , CAST(budgetlimit.amount AS decimal) budget_amount
        , CAST(calculatedspend.actualspend.amount AS decimal) actualspend
        , CAST(calculatedspend.forecastedspend.amount AS decimal) forecastedspend
        , timeunit
        , budgettype budget_type
        , account_id
        , timeperiod.start start_date
        , timeperiod."end"  end_date
        , year budget_year
        , month budget_month
        FROM
          ${DatabaseName}.budgets_data
        WHERE (budgettype = 'COST')  AND costfilters.filter[1] = 'None'
